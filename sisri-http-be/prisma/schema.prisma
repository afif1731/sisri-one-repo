generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Quality {
  GOOD
  MILD
  UNHEALTHY
  VERY_UNHEALTHY
  DANGEROUS
}

enum Direction {
  NORTH
  SOUTH
  WEST
  EAST
  NORTH_EAST
  NORTH_WEST
  SOUTH_EAST
  SOUTH_WEST
}

model Accounts {
  id                  String      @id @default(uuid())
  name                String
  email               String      @unique
  password            String
  role                Role        @default(USER)
  is_email_verified   Boolean     @default(false)
  
  created_at          DateTime    @default(now())
  updated_at          DateTime    @default(now()) @updatedAt
}

model Junction {
  id                    String      @id @default(uuid())
  junction_num          Int

  created_at            DateTime    @default(now())
  updated_at            DateTime    @default(now()) @updatedAt

  road                  Road[]
  cctv                  RoadCctv[]
}

model Road {
  id                  String      @id @default(uuid())
  road_name           String
  road_length         Float

  air_quality_id      String
  air_quality         AirQuality  @relation(fields: [air_quality_id], references: [id])

  created_at          DateTime    @default(now())
  updated_at          DateTime    @default(now()) @updatedAt

  road_lane           RoadLane[]
  junction            Junction[]
}

model RoadLane {
  id                String            @id @default(uuid())
  direction         Direction
  lane_num          Int
  capacity          Int

  road_id           String
  road              Road              @relation(fields: [road_id], references: [id])
  lane_traffic_id   String
  lane_traffic      LaneTraffic       @relation(fields: [lane_traffic_id], references: [id])

  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now()) @updatedAt

  traffic_violation TrafficViolation[]
  road_cctv         RoadCctv[]
}

model LaneTraffic {
  id              String            @id @default(uuid())
  traffic_flow    Float
  vehicle_num     Int
  detection_range Float             @default(10)

  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt

  RoadLane        RoadLane[]
}

model TrafficViolation {
  id              String            @id @default(uuid())
  detail          String?
  image_url       String?

  road_lane_id    String
  road_lane       RoadLane          @relation(fields: [road_lane_id], references: [id])

  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt
}

model RoadCctv {
  id              String            @id @default(uuid())

  road_lane_id    String
  road_lane       RoadLane          @relation(fields: [road_lane_id], references: [id])
  junction_id     String
  junction        Junction          @relation(fields: [junction_id], references: [id])

  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt

  traffic_lamp    TrafficLamp[]
}

model TrafficLamp {
  id              String            @id @default(uuid())
  green_duration  Int               @default(20)
  yellow_duration Int               @default(3)
  red_duration    Int               @default(99)
  order           Int               @default(1)

  road_cctv_id    String
  road_cctv       RoadCctv          @relation(fields: [road_cctv_id], references: [id])

  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt
}

model AirQuality {
  id              String            @id @default(uuid())
  pm1             Float
  pm10            Float
  pm25            Float
  co              Float
  no2             Float
  ozone           Float
  temperature     Float
  humidity        Float
  pressure        Float
  aqi             Int
  quality         Quality

  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt

  road            Road[]
}

model WebRoadSearch {
  id                String  @id @default(uuid())
  start_coor        Float
  destination_coor  Float

  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt
}